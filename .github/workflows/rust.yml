env:
  linux_asset_path: './target/release/libbackend_login.rlib'
  macos_asset_path: './target/release/libbackend_login.rlib'
  linux_asset_name: 'libbackend_login_linux.rlib'
  macos_asset_name: 'libbackend_login_macos.rlib'
  asset_content_type: 'application/octet-stream'

name: Rust Github Action

on: [push, pull_request]

jobs:
  build-ubuntu:
    name: Build on Ubuntu
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Switch Rust to Nightly
        run: rustup default nightly

      - name: Check Rust Version
        run: rustup show

      - name: Build
        run: cargo br -v

      - name: Run Tests
        run: cargo test -v

      - name: Create Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.linux_asset_path }}
          asset_name: ${{ env.linux_asset_name }}
          asset_content_type: ${{ env.asset_content_type }}

  build-macos:
    name: Build on Mac OS
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:

      - uses: actions/checkout@v2

      - name: Switch Rust to Nightly
        run: rustup default nightly

      - name: Check Rust Version
        run: rustup show

      - name: Build
        run: cargo br -v

      - name: Run Tests
        run: cargo test -v

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.macos_asset_path }}
          asset_name: ${{ env.macos_asset_name }}
          asset_content_type: ${{ env.asset_content_type }}